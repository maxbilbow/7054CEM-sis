# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.membership_type import MembershipType  # noqa: F401,E501
from swagger_server import util


class Benefit(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, name: str=None, min_membership: MembershipType=None, max_membership: MembershipType=None):  # noqa: E501
        """Benefit - a model defined in Swagger

        :param name: The name of this Benefit.  # noqa: E501
        :type name: str
        :param min_membership: The min_membership of this Benefit.  # noqa: E501
        :type min_membership: MembershipType
        :param max_membership: The max_membership of this Benefit.  # noqa: E501
        :type max_membership: MembershipType
        """
        self.swagger_types = {
            'name': str,
            'min_membership': MembershipType,
            'max_membership': MembershipType
        }

        self.attribute_map = {
            'name': 'name',
            'min_membership': 'min_membership',
            'max_membership': 'max_membership'
        }
        self._name = name
        self._min_membership = min_membership
        self._max_membership = max_membership

    @classmethod
    def from_dict(cls, dikt) -> 'Benefit':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Benefit of this Benefit.  # noqa: E501
        :rtype: Benefit
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self) -> str:
        """Gets the name of this Benefit.


        :return: The name of this Benefit.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this Benefit.


        :param name: The name of this Benefit.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def min_membership(self) -> MembershipType:
        """Gets the min_membership of this Benefit.


        :return: The min_membership of this Benefit.
        :rtype: MembershipType
        """
        return self._min_membership

    @min_membership.setter
    def min_membership(self, min_membership: MembershipType):
        """Sets the min_membership of this Benefit.


        :param min_membership: The min_membership of this Benefit.
        :type min_membership: MembershipType
        """
        if min_membership is None:
            raise ValueError("Invalid value for `min_membership`, must not be `None`")  # noqa: E501

        self._min_membership = min_membership

    @property
    def max_membership(self) -> MembershipType:
        """Gets the max_membership of this Benefit.


        :return: The max_membership of this Benefit.
        :rtype: MembershipType
        """
        return self._max_membership

    @max_membership.setter
    def max_membership(self, max_membership: MembershipType):
        """Sets the max_membership of this Benefit.


        :param max_membership: The max_membership of this Benefit.
        :type max_membership: MembershipType
        """

        self._max_membership = max_membership
