# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.insurance_type import InsuranceType  # noqa: F401,E501
from swagger_server.models.one_of_quote_sections import OneOfQuoteSections  # noqa: F401,E501
from swagger_server import util


class Quote(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, id: int=None, user_id: int=None, type: InsuranceType=None, created: int=None, updated: int=None, is_complete: bool=None, price: float=None, sections: OneOfQuoteSections=None):  # noqa: E501
        """Quote - a model defined in Swagger

        :param id: The id of this Quote.  # noqa: E501
        :type id: int
        :param user_id: The user_id of this Quote.  # noqa: E501
        :type user_id: int
        :param type: The type of this Quote.  # noqa: E501
        :type type: InsuranceType
        :param created: The created of this Quote.  # noqa: E501
        :type created: int
        :param updated: The updated of this Quote.  # noqa: E501
        :type updated: int
        :param is_complete: The is_complete of this Quote.  # noqa: E501
        :type is_complete: bool
        :param price: The price of this Quote.  # noqa: E501
        :type price: float
        :param sections: The sections of this Quote.  # noqa: E501
        :type sections: OneOfQuoteSections
        """
        self.swagger_types = {
            'id': int,
            'user_id': int,
            'type': InsuranceType,
            'created': int,
            'updated': int,
            'is_complete': bool,
            'price': float,
            'sections': OneOfQuoteSections
        }

        self.attribute_map = {
            'id': 'id',
            'user_id': 'user_id',
            'type': 'type',
            'created': 'created',
            'updated': 'updated',
            'is_complete': 'is_complete',
            'price': 'price',
            'sections': 'sections'
        }
        self._id = id
        self._user_id = user_id
        self._type = type
        self._created = created
        self._updated = updated
        self._is_complete = is_complete
        self._price = price
        self._sections = sections

    @classmethod
    def from_dict(cls, dikt) -> 'Quote':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Quote of this Quote.  # noqa: E501
        :rtype: Quote
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self) -> int:
        """Gets the id of this Quote.


        :return: The id of this Quote.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id: int):
        """Sets the id of this Quote.


        :param id: The id of this Quote.
        :type id: int
        """

        self._id = id

    @property
    def user_id(self) -> int:
        """Gets the user_id of this Quote.


        :return: The user_id of this Quote.
        :rtype: int
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id: int):
        """Sets the user_id of this Quote.


        :param user_id: The user_id of this Quote.
        :type user_id: int
        """

        self._user_id = user_id

    @property
    def type(self) -> InsuranceType:
        """Gets the type of this Quote.


        :return: The type of this Quote.
        :rtype: InsuranceType
        """
        return self._type

    @type.setter
    def type(self, type: InsuranceType):
        """Sets the type of this Quote.


        :param type: The type of this Quote.
        :type type: InsuranceType
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501

        self._type = type

    @property
    def created(self) -> int:
        """Gets the created of this Quote.


        :return: The created of this Quote.
        :rtype: int
        """
        return self._created

    @created.setter
    def created(self, created: int):
        """Sets the created of this Quote.


        :param created: The created of this Quote.
        :type created: int
        """

        self._created = created

    @property
    def updated(self) -> int:
        """Gets the updated of this Quote.


        :return: The updated of this Quote.
        :rtype: int
        """
        return self._updated

    @updated.setter
    def updated(self, updated: int):
        """Sets the updated of this Quote.


        :param updated: The updated of this Quote.
        :type updated: int
        """

        self._updated = updated

    @property
    def is_complete(self) -> bool:
        """Gets the is_complete of this Quote.


        :return: The is_complete of this Quote.
        :rtype: bool
        """
        return self._is_complete

    @is_complete.setter
    def is_complete(self, is_complete: bool):
        """Sets the is_complete of this Quote.


        :param is_complete: The is_complete of this Quote.
        :type is_complete: bool
        """

        self._is_complete = is_complete

    @property
    def price(self) -> float:
        """Gets the price of this Quote.


        :return: The price of this Quote.
        :rtype: float
        """
        return self._price

    @price.setter
    def price(self, price: float):
        """Sets the price of this Quote.


        :param price: The price of this Quote.
        :type price: float
        """

        self._price = price

    @property
    def sections(self) -> OneOfQuoteSections:
        """Gets the sections of this Quote.


        :return: The sections of this Quote.
        :rtype: OneOfQuoteSections
        """
        return self._sections

    @sections.setter
    def sections(self, sections: OneOfQuoteSections):
        """Sets the sections of this Quote.


        :param sections: The sections of this Quote.
        :type sections: OneOfQuoteSections
        """

        self._sections = sections
