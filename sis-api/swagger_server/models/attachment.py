# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class Attachment(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, claim_note_id: int=None, name: str=None, mime_type: str=None, data: bytearray=None):  # noqa: E501
        """Attachment - a model defined in Swagger

        :param claim_note_id: The claim_note_id of this Attachment.  # noqa: E501
        :type claim_note_id: int
        :param name: The name of this Attachment.  # noqa: E501
        :type name: str
        :param mime_type: The mime_type of this Attachment.  # noqa: E501
        :type mime_type: str
        :param data: The data of this Attachment.  # noqa: E501
        :type data: bytearray
        """
        self.swagger_types = {
            'claim_note_id': int,
            'name': str,
            'mime_type': str,
            'data': bytearray
        }

        self.attribute_map = {
            'claim_note_id': 'claim_note_id',
            'name': 'name',
            'mime_type': 'mime_type',
            'data': 'data'
        }
        self._claim_note_id = claim_note_id
        self._name = name
        self._mime_type = mime_type
        self._data = data

    @classmethod
    def from_dict(cls, dikt) -> 'Attachment':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Attachment of this Attachment.  # noqa: E501
        :rtype: Attachment
        """
        return util.deserialize_model(dikt, cls)

    @property
    def claim_note_id(self) -> int:
        """Gets the claim_note_id of this Attachment.


        :return: The claim_note_id of this Attachment.
        :rtype: int
        """
        return self._claim_note_id

    @claim_note_id.setter
    def claim_note_id(self, claim_note_id: int):
        """Sets the claim_note_id of this Attachment.


        :param claim_note_id: The claim_note_id of this Attachment.
        :type claim_note_id: int
        """

        self._claim_note_id = claim_note_id

    @property
    def name(self) -> str:
        """Gets the name of this Attachment.


        :return: The name of this Attachment.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this Attachment.


        :param name: The name of this Attachment.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def mime_type(self) -> str:
        """Gets the mime_type of this Attachment.


        :return: The mime_type of this Attachment.
        :rtype: str
        """
        return self._mime_type

    @mime_type.setter
    def mime_type(self, mime_type: str):
        """Sets the mime_type of this Attachment.


        :param mime_type: The mime_type of this Attachment.
        :type mime_type: str
        """
        if mime_type is None:
            raise ValueError("Invalid value for `mime_type`, must not be `None`")  # noqa: E501

        self._mime_type = mime_type

    @property
    def data(self) -> bytearray:
        """Gets the data of this Attachment.


        :return: The data of this Attachment.
        :rtype: bytearray
        """
        return self._data

    @data.setter
    def data(self, data: bytearray):
        """Sets the data of this Attachment.


        :param data: The data of this Attachment.
        :type data: bytearray
        """
        if data is None:
            raise ValueError("Invalid value for `data`, must not be `None`")  # noqa: E501

        self._data = data
