# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.previous_claim import PreviousClaim  # noqa: F401,E501
from swagger_server import util


class DriverHistory(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, id: int=None, licence_type: str=None, license_since: date=None, licence_no: str=None, previous_claims: List[PreviousClaim]=None):  # noqa: E501
        """DriverHistory - a model defined in Swagger

        :param id: The id of this DriverHistory.  # noqa: E501
        :type id: int
        :param licence_type: The licence_type of this DriverHistory.  # noqa: E501
        :type licence_type: str
        :param license_since: The license_since of this DriverHistory.  # noqa: E501
        :type license_since: date
        :param licence_no: The licence_no of this DriverHistory.  # noqa: E501
        :type licence_no: str
        :param previous_claims: The previous_claims of this DriverHistory.  # noqa: E501
        :type previous_claims: List[PreviousClaim]
        """
        self.swagger_types = {
            'id': int,
            'licence_type': str,
            'license_since': date,
            'licence_no': str,
            'previous_claims': List[PreviousClaim]
        }

        self.attribute_map = {
            'id': 'id',
            'licence_type': 'licence_type',
            'license_since': 'license_since',
            'licence_no': 'licence_no',
            'previous_claims': 'previous_claims'
        }
        self._id = id
        self._licence_type = licence_type
        self._license_since = license_since
        self._licence_no = licence_no
        self._previous_claims = previous_claims

    @classmethod
    def from_dict(cls, dikt) -> 'DriverHistory':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The DriverHistory of this DriverHistory.  # noqa: E501
        :rtype: DriverHistory
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self) -> int:
        """Gets the id of this DriverHistory.


        :return: The id of this DriverHistory.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id: int):
        """Sets the id of this DriverHistory.


        :param id: The id of this DriverHistory.
        :type id: int
        """

        self._id = id

    @property
    def licence_type(self) -> str:
        """Gets the licence_type of this DriverHistory.


        :return: The licence_type of this DriverHistory.
        :rtype: str
        """
        return self._licence_type

    @licence_type.setter
    def licence_type(self, licence_type: str):
        """Sets the licence_type of this DriverHistory.


        :param licence_type: The licence_type of this DriverHistory.
        :type licence_type: str
        """
        allowed_values = ["Full", "Provisional", ""]  # noqa: E501
        if licence_type not in allowed_values:
            raise ValueError(
                "Invalid value for `licence_type` ({0}), must be one of {1}"
                .format(licence_type, allowed_values)
            )

        self._licence_type = licence_type

    @property
    def license_since(self) -> date:
        """Gets the license_since of this DriverHistory.


        :return: The license_since of this DriverHistory.
        :rtype: date
        """
        return self._license_since

    @license_since.setter
    def license_since(self, license_since: date):
        """Sets the license_since of this DriverHistory.


        :param license_since: The license_since of this DriverHistory.
        :type license_since: date
        """

        self._license_since = license_since

    @property
    def licence_no(self) -> str:
        """Gets the licence_no of this DriverHistory.


        :return: The licence_no of this DriverHistory.
        :rtype: str
        """
        return self._licence_no

    @licence_no.setter
    def licence_no(self, licence_no: str):
        """Sets the licence_no of this DriverHistory.


        :param licence_no: The licence_no of this DriverHistory.
        :type licence_no: str
        """

        self._licence_no = licence_no

    @property
    def previous_claims(self) -> List[PreviousClaim]:
        """Gets the previous_claims of this DriverHistory.


        :return: The previous_claims of this DriverHistory.
        :rtype: List[PreviousClaim]
        """
        return self._previous_claims

    @previous_claims.setter
    def previous_claims(self, previous_claims: List[PreviousClaim]):
        """Sets the previous_claims of this DriverHistory.


        :param previous_claims: The previous_claims of this DriverHistory.
        :type previous_claims: List[PreviousClaim]
        """

        self._previous_claims = previous_claims
