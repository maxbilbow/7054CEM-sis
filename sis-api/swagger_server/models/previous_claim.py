# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class PreviousClaim(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, id: int=None, driver_history_id: int=None, _date: date=None, fault: str=None, claim_type: str=None):  # noqa: E501
        """PreviousClaim - a model defined in Swagger

        :param id: The id of this PreviousClaim.  # noqa: E501
        :type id: int
        :param driver_history_id: The driver_history_id of this PreviousClaim.  # noqa: E501
        :type driver_history_id: int
        :param _date: The _date of this PreviousClaim.  # noqa: E501
        :type _date: date
        :param fault: The fault of this PreviousClaim.  # noqa: E501
        :type fault: str
        :param claim_type: The claim_type of this PreviousClaim.  # noqa: E501
        :type claim_type: str
        """
        self.swagger_types = {
            'id': int,
            'driver_history_id': int,
            '_date': date,
            'fault': str,
            'claim_type': str
        }

        self.attribute_map = {
            'id': 'id',
            'driver_history_id': 'driver_history_id',
            '_date': 'date',
            'fault': 'fault',
            'claim_type': 'claim_type'
        }
        self._id = id
        self._driver_history_id = driver_history_id
        self.__date = _date
        self._fault = fault
        self._claim_type = claim_type

    @classmethod
    def from_dict(cls, dikt) -> 'PreviousClaim':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The PreviousClaim of this PreviousClaim.  # noqa: E501
        :rtype: PreviousClaim
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self) -> int:
        """Gets the id of this PreviousClaim.


        :return: The id of this PreviousClaim.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id: int):
        """Sets the id of this PreviousClaim.


        :param id: The id of this PreviousClaim.
        :type id: int
        """

        self._id = id

    @property
    def driver_history_id(self) -> int:
        """Gets the driver_history_id of this PreviousClaim.


        :return: The driver_history_id of this PreviousClaim.
        :rtype: int
        """
        return self._driver_history_id

    @driver_history_id.setter
    def driver_history_id(self, driver_history_id: int):
        """Sets the driver_history_id of this PreviousClaim.


        :param driver_history_id: The driver_history_id of this PreviousClaim.
        :type driver_history_id: int
        """

        self._driver_history_id = driver_history_id

    @property
    def _date(self) -> date:
        """Gets the _date of this PreviousClaim.


        :return: The _date of this PreviousClaim.
        :rtype: date
        """
        return self.__date

    @_date.setter
    def _date(self, _date: date):
        """Sets the _date of this PreviousClaim.


        :param _date: The _date of this PreviousClaim.
        :type _date: date
        """

        self.__date = _date

    @property
    def fault(self) -> str:
        """Gets the fault of this PreviousClaim.


        :return: The fault of this PreviousClaim.
        :rtype: str
        """
        return self._fault

    @fault.setter
    def fault(self, fault: str):
        """Sets the fault of this PreviousClaim.


        :param fault: The fault of this PreviousClaim.
        :type fault: str
        """
        allowed_values = ["Self", "ThirdParty"]  # noqa: E501
        if fault not in allowed_values:
            raise ValueError(
                "Invalid value for `fault` ({0}), must be one of {1}"
                .format(fault, allowed_values)
            )

        self._fault = fault

    @property
    def claim_type(self) -> str:
        """Gets the claim_type of this PreviousClaim.


        :return: The claim_type of this PreviousClaim.
        :rtype: str
        """
        return self._claim_type

    @claim_type.setter
    def claim_type(self, claim_type: str):
        """Sets the claim_type of this PreviousClaim.


        :param claim_type: The claim_type of this PreviousClaim.
        :type claim_type: str
        """
        allowed_values = ["Accident", "Theft"]  # noqa: E501
        if claim_type not in allowed_values:
            raise ValueError(
                "Invalid value for `claim_type` ({0}), must be one of {1}"
                .format(claim_type, allowed_values)
            )

        self._claim_type = claim_type
