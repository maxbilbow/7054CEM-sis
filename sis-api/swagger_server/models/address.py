# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class Address(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, id: int=None, number_or_name: str=None, street: str=None, town: str=None, county: str=None, postcode: str=None):  # noqa: E501
        """Address - a model defined in Swagger

        :param id: The id of this Address.  # noqa: E501
        :type id: int
        :param number_or_name: The number_or_name of this Address.  # noqa: E501
        :type number_or_name: str
        :param street: The street of this Address.  # noqa: E501
        :type street: str
        :param town: The town of this Address.  # noqa: E501
        :type town: str
        :param county: The county of this Address.  # noqa: E501
        :type county: str
        :param postcode: The postcode of this Address.  # noqa: E501
        :type postcode: str
        """
        self.swagger_types = {
            'id': int,
            'number_or_name': str,
            'street': str,
            'town': str,
            'county': str,
            'postcode': str
        }

        self.attribute_map = {
            'id': 'id',
            'number_or_name': 'number_or_name',
            'street': 'street',
            'town': 'town',
            'county': 'county',
            'postcode': 'postcode'
        }
        self._id = id
        self._number_or_name = number_or_name
        self._street = street
        self._town = town
        self._county = county
        self._postcode = postcode

    @classmethod
    def from_dict(cls, dikt) -> 'Address':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Address of this Address.  # noqa: E501
        :rtype: Address
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self) -> int:
        """Gets the id of this Address.


        :return: The id of this Address.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id: int):
        """Sets the id of this Address.


        :param id: The id of this Address.
        :type id: int
        """

        self._id = id

    @property
    def number_or_name(self) -> str:
        """Gets the number_or_name of this Address.


        :return: The number_or_name of this Address.
        :rtype: str
        """
        return self._number_or_name

    @number_or_name.setter
    def number_or_name(self, number_or_name: str):
        """Sets the number_or_name of this Address.


        :param number_or_name: The number_or_name of this Address.
        :type number_or_name: str
        """

        self._number_or_name = number_or_name

    @property
    def street(self) -> str:
        """Gets the street of this Address.


        :return: The street of this Address.
        :rtype: str
        """
        return self._street

    @street.setter
    def street(self, street: str):
        """Sets the street of this Address.


        :param street: The street of this Address.
        :type street: str
        """

        self._street = street

    @property
    def town(self) -> str:
        """Gets the town of this Address.


        :return: The town of this Address.
        :rtype: str
        """
        return self._town

    @town.setter
    def town(self, town: str):
        """Sets the town of this Address.


        :param town: The town of this Address.
        :type town: str
        """

        self._town = town

    @property
    def county(self) -> str:
        """Gets the county of this Address.


        :return: The county of this Address.
        :rtype: str
        """
        return self._county

    @county.setter
    def county(self, county: str):
        """Sets the county of this Address.


        :param county: The county of this Address.
        :type county: str
        """

        self._county = county

    @property
    def postcode(self) -> str:
        """Gets the postcode of this Address.


        :return: The postcode of this Address.
        :rtype: str
        """
        return self._postcode

    @postcode.setter
    def postcode(self, postcode: str):
        """Sets the postcode of this Address.


        :param postcode: The postcode of this Address.
        :type postcode: str
        """

        self._postcode = postcode
