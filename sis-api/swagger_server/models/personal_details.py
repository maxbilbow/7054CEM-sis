# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.address import Address  # noqa: F401,E501
from swagger_server import util


class PersonalDetails(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, id: int=None, full_name: str=None, address: Address=None, dob: date=None, relationship_status: str=None, home_owner: bool=None, dependents: int=None, employment_status: str=None):  # noqa: E501
        """PersonalDetails - a model defined in Swagger

        :param id: The id of this PersonalDetails.  # noqa: E501
        :type id: int
        :param full_name: The full_name of this PersonalDetails.  # noqa: E501
        :type full_name: str
        :param address: The address of this PersonalDetails.  # noqa: E501
        :type address: Address
        :param dob: The dob of this PersonalDetails.  # noqa: E501
        :type dob: date
        :param relationship_status: The relationship_status of this PersonalDetails.  # noqa: E501
        :type relationship_status: str
        :param home_owner: The home_owner of this PersonalDetails.  # noqa: E501
        :type home_owner: bool
        :param dependents: The dependents of this PersonalDetails.  # noqa: E501
        :type dependents: int
        :param employment_status: The employment_status of this PersonalDetails.  # noqa: E501
        :type employment_status: str
        """
        self.swagger_types = {
            'id': int,
            'full_name': str,
            'address': Address,
            'dob': date,
            'relationship_status': str,
            'home_owner': bool,
            'dependents': int,
            'employment_status': str
        }

        self.attribute_map = {
            'id': 'id',
            'full_name': 'full_name',
            'address': 'address',
            'dob': 'dob',
            'relationship_status': 'relationship_status',
            'home_owner': 'home_owner',
            'dependents': 'dependents',
            'employment_status': 'employment_status'
        }
        self._id = id
        self._full_name = full_name
        self._address = address
        self._dob = dob
        self._relationship_status = relationship_status
        self._home_owner = home_owner
        self._dependents = dependents
        self._employment_status = employment_status

    @classmethod
    def from_dict(cls, dikt) -> 'PersonalDetails':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The PersonalDetails of this PersonalDetails.  # noqa: E501
        :rtype: PersonalDetails
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self) -> int:
        """Gets the id of this PersonalDetails.


        :return: The id of this PersonalDetails.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id: int):
        """Sets the id of this PersonalDetails.


        :param id: The id of this PersonalDetails.
        :type id: int
        """

        self._id = id

    @property
    def full_name(self) -> str:
        """Gets the full_name of this PersonalDetails.


        :return: The full_name of this PersonalDetails.
        :rtype: str
        """
        return self._full_name

    @full_name.setter
    def full_name(self, full_name: str):
        """Sets the full_name of this PersonalDetails.


        :param full_name: The full_name of this PersonalDetails.
        :type full_name: str
        """

        self._full_name = full_name

    @property
    def address(self) -> Address:
        """Gets the address of this PersonalDetails.


        :return: The address of this PersonalDetails.
        :rtype: Address
        """
        return self._address

    @address.setter
    def address(self, address: Address):
        """Sets the address of this PersonalDetails.


        :param address: The address of this PersonalDetails.
        :type address: Address
        """

        self._address = address

    @property
    def dob(self) -> date:
        """Gets the dob of this PersonalDetails.


        :return: The dob of this PersonalDetails.
        :rtype: date
        """
        return self._dob

    @dob.setter
    def dob(self, dob: date):
        """Sets the dob of this PersonalDetails.


        :param dob: The dob of this PersonalDetails.
        :type dob: date
        """

        self._dob = dob

    @property
    def relationship_status(self) -> str:
        """Gets the relationship_status of this PersonalDetails.


        :return: The relationship_status of this PersonalDetails.
        :rtype: str
        """
        return self._relationship_status

    @relationship_status.setter
    def relationship_status(self, relationship_status: str):
        """Sets the relationship_status of this PersonalDetails.


        :param relationship_status: The relationship_status of this PersonalDetails.
        :type relationship_status: str
        """
        allowed_values = ["Single", "Married", ""]  # noqa: E501
        if relationship_status not in allowed_values:
            raise ValueError(
                "Invalid value for `relationship_status` ({0}), must be one of {1}"
                .format(relationship_status, allowed_values)
            )

        self._relationship_status = relationship_status

    @property
    def home_owner(self) -> bool:
        """Gets the home_owner of this PersonalDetails.


        :return: The home_owner of this PersonalDetails.
        :rtype: bool
        """
        return self._home_owner

    @home_owner.setter
    def home_owner(self, home_owner: bool):
        """Sets the home_owner of this PersonalDetails.


        :param home_owner: The home_owner of this PersonalDetails.
        :type home_owner: bool
        """

        self._home_owner = home_owner

    @property
    def dependents(self) -> int:
        """Gets the dependents of this PersonalDetails.

        Number of dependents under the age of 16  # noqa: E501

        :return: The dependents of this PersonalDetails.
        :rtype: int
        """
        return self._dependents

    @dependents.setter
    def dependents(self, dependents: int):
        """Sets the dependents of this PersonalDetails.

        Number of dependents under the age of 16  # noqa: E501

        :param dependents: The dependents of this PersonalDetails.
        :type dependents: int
        """

        self._dependents = dependents

    @property
    def employment_status(self) -> str:
        """Gets the employment_status of this PersonalDetails.


        :return: The employment_status of this PersonalDetails.
        :rtype: str
        """
        return self._employment_status

    @employment_status.setter
    def employment_status(self, employment_status: str):
        """Sets the employment_status of this PersonalDetails.


        :param employment_status: The employment_status of this PersonalDetails.
        :type employment_status: str
        """
        allowed_values = ["FullTime", "PartTime", "Unemployed", "Retired", "Student", ""]  # noqa: E501
        if employment_status not in allowed_values:
            raise ValueError(
                "Invalid value for `employment_status` ({0}), must be one of {1}"
                .format(employment_status, allowed_values)
            )

        self._employment_status = employment_status
