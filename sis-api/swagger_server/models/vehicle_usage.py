# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.address import Address  # noqa: F401,E501
from swagger_server import util


class VehicleUsage(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, quote_id: int=None, usage_type: str=None, annual_milage: int=None, day_storage: str=None, night_storage: str=None, night_storage_at_home: bool=None, night_storage_address: Address=None):  # noqa: E501
        """VehicleUsage - a model defined in Swagger

        :param quote_id: The quote_id of this VehicleUsage.  # noqa: E501
        :type quote_id: int
        :param usage_type: The usage_type of this VehicleUsage.  # noqa: E501
        :type usage_type: str
        :param annual_milage: The annual_milage of this VehicleUsage.  # noqa: E501
        :type annual_milage: int
        :param day_storage: The day_storage of this VehicleUsage.  # noqa: E501
        :type day_storage: str
        :param night_storage: The night_storage of this VehicleUsage.  # noqa: E501
        :type night_storage: str
        :param night_storage_at_home: The night_storage_at_home of this VehicleUsage.  # noqa: E501
        :type night_storage_at_home: bool
        :param night_storage_address: The night_storage_address of this VehicleUsage.  # noqa: E501
        :type night_storage_address: Address
        """
        self.swagger_types = {
            'quote_id': int,
            'usage_type': str,
            'annual_milage': int,
            'day_storage': str,
            'night_storage': str,
            'night_storage_at_home': bool,
            'night_storage_address': Address
        }

        self.attribute_map = {
            'quote_id': 'quote_id',
            'usage_type': 'usage_type',
            'annual_milage': 'annual_milage',
            'day_storage': 'day_storage',
            'night_storage': 'night_storage',
            'night_storage_at_home': 'night_storage_at_home',
            'night_storage_address': 'night_storage_address'
        }
        self._quote_id = quote_id
        self._usage_type = usage_type
        self._annual_milage = annual_milage
        self._day_storage = day_storage
        self._night_storage = night_storage
        self._night_storage_at_home = night_storage_at_home
        self._night_storage_address = night_storage_address

    @classmethod
    def from_dict(cls, dikt) -> 'VehicleUsage':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The VehicleUsage of this VehicleUsage.  # noqa: E501
        :rtype: VehicleUsage
        """
        return util.deserialize_model(dikt, cls)

    @property
    def quote_id(self) -> int:
        """Gets the quote_id of this VehicleUsage.


        :return: The quote_id of this VehicleUsage.
        :rtype: int
        """
        return self._quote_id

    @quote_id.setter
    def quote_id(self, quote_id: int):
        """Sets the quote_id of this VehicleUsage.


        :param quote_id: The quote_id of this VehicleUsage.
        :type quote_id: int
        """

        self._quote_id = quote_id

    @property
    def usage_type(self) -> str:
        """Gets the usage_type of this VehicleUsage.


        :return: The usage_type of this VehicleUsage.
        :rtype: str
        """
        return self._usage_type

    @usage_type.setter
    def usage_type(self, usage_type: str):
        """Sets the usage_type of this VehicleUsage.


        :param usage_type: The usage_type of this VehicleUsage.
        :type usage_type: str
        """
        allowed_values = ["SDP", "SDPC", "SDPCB"]  # noqa: E501
        if usage_type not in allowed_values:
            raise ValueError(
                "Invalid value for `usage_type` ({0}), must be one of {1}"
                .format(usage_type, allowed_values)
            )

        self._usage_type = usage_type

    @property
    def annual_milage(self) -> int:
        """Gets the annual_milage of this VehicleUsage.


        :return: The annual_milage of this VehicleUsage.
        :rtype: int
        """
        return self._annual_milage

    @annual_milage.setter
    def annual_milage(self, annual_milage: int):
        """Sets the annual_milage of this VehicleUsage.


        :param annual_milage: The annual_milage of this VehicleUsage.
        :type annual_milage: int
        """

        self._annual_milage = annual_milage

    @property
    def day_storage(self) -> str:
        """Gets the day_storage of this VehicleUsage.


        :return: The day_storage of this VehicleUsage.
        :rtype: str
        """
        return self._day_storage

    @day_storage.setter
    def day_storage(self, day_storage: str):
        """Sets the day_storage of this VehicleUsage.


        :param day_storage: The day_storage of this VehicleUsage.
        :type day_storage: str
        """
        allowed_values = ["Home", "CarParkOffice", "CarParkPublic", "StreetAwayFromHome"]  # noqa: E501
        if day_storage not in allowed_values:
            raise ValueError(
                "Invalid value for `day_storage` ({0}), must be one of {1}"
                .format(day_storage, allowed_values)
            )

        self._day_storage = day_storage

    @property
    def night_storage(self) -> str:
        """Gets the night_storage of this VehicleUsage.


        :return: The night_storage of this VehicleUsage.
        :rtype: str
        """
        return self._night_storage

    @night_storage.setter
    def night_storage(self, night_storage: str):
        """Sets the night_storage of this VehicleUsage.


        :param night_storage: The night_storage of this VehicleUsage.
        :type night_storage: str
        """
        allowed_values = ["Drive", "StreetOutsideHome", "StreetAwayFromHome", "Garage"]  # noqa: E501
        if night_storage not in allowed_values:
            raise ValueError(
                "Invalid value for `night_storage` ({0}), must be one of {1}"
                .format(night_storage, allowed_values)
            )

        self._night_storage = night_storage

    @property
    def night_storage_at_home(self) -> bool:
        """Gets the night_storage_at_home of this VehicleUsage.


        :return: The night_storage_at_home of this VehicleUsage.
        :rtype: bool
        """
        return self._night_storage_at_home

    @night_storage_at_home.setter
    def night_storage_at_home(self, night_storage_at_home: bool):
        """Sets the night_storage_at_home of this VehicleUsage.


        :param night_storage_at_home: The night_storage_at_home of this VehicleUsage.
        :type night_storage_at_home: bool
        """

        self._night_storage_at_home = night_storage_at_home

    @property
    def night_storage_address(self) -> Address:
        """Gets the night_storage_address of this VehicleUsage.


        :return: The night_storage_address of this VehicleUsage.
        :rtype: Address
        """
        return self._night_storage_address

    @night_storage_address.setter
    def night_storage_address(self, night_storage_address: Address):
        """Sets the night_storage_address of this VehicleUsage.


        :param night_storage_address: The night_storage_address of this VehicleUsage.
        :type night_storage_address: Address
        """

        self._night_storage_address = night_storage_address
