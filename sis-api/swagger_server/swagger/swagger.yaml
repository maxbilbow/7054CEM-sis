openapi: 3.0.1
info:
  title: Smart Insurance System
  version: 1.0.0
servers:
- url: /api/v1
tags:
- name: Authorization
- name: User
- name: User Profile
- name: Membership
- name: Quotes
- name: Insurance Policy
paths:
  /secret:
    get:
      tags:
      - Authorization
      summary: Return secret string
      operationId: get_secret
      responses:
        "200":
          description: secret response
          content:
            '*/*':
              schema:
                type: string
                x-content-type: '*/*'
      security:
      - api_key: []
      x-openapi-router-controller: swagger_server.controllers.authorization_controller
  /user-id/{email}:
    get:
      tags:
      - User
      summary: Get a user id by email
      operationId: find_by_email
      parameters:
      - name: email
        in: path
        description: The email of the user to retrieve
        required: true
        style: simple
        explode: false
        schema:
          type: string
          format: email
      responses:
        "200":
          description: Successfully retrived user
          content:
            application/json:
              schema:
                type: integer
                x-content-type: application/json
        "404":
          description: User doesn't exist for email
          content: {}
      x-openapi-router-controller: swagger_server.controllers.user_controller
  /user/verify:
    post:
      tags:
      - User
      summary: Verify user credentials and return user id
      operationId: check_credentials
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        required: true
      responses:
        "200":
          description: Successfully retrived user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200'
        "401":
          description: User is not authorised
          content: {}
        "404":
          description: User doesn't exist for email
          content: {}
      x-openapi-router-controller: swagger_server.controllers.user_controller
  /user:
    post:
      tags:
      - User
      summary: Create a user
      operationId: create_user
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        required: true
      responses:
        "200":
          description: Successfully updated user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_1'
        "404":
          description: User doesn't exist
          content: {}
      x-codegen-request-body-name: User
      x-openapi-router-controller: swagger_server.controllers.user_controller
  /user/{user_id}:
    get:
      tags:
      - User
      summary: Get a user
      operationId: get_user
      parameters:
      - name: user_id
        in: path
        description: The id of the user to retrieve
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      responses:
        "200":
          description: Successfully retrived user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        "404":
          description: User doesn't exist
          content: {}
      x-openapi-router-controller: swagger_server.controllers.user_controller
    put:
      tags:
      - User
      summary: Update and replace a user
      operationId: update_user
      parameters:
      - name: user_id
        in: path
        description: The id of the user to retrieve
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        required: true
      responses:
        "200":
          description: Successfully updated user
          content: {}
        "404":
          description: User doesn't exist
          content: {}
      x-codegen-request-body-name: User
      x-openapi-router-controller: swagger_server.controllers.user_controller
    delete:
      tags:
      - User
      summary: Remove a user
      operationId: remove_user
      parameters:
      - name: user_id
        in: path
        description: The id of the user to remove
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      responses:
        "202":
          description: Successfully deleted user
          content: {}
        "404":
          description: User doesn't exist
          content: {}
      x-openapi-router-controller: swagger_server.controllers.user_controller
  /user/{user_id}/profile:
    get:
      tags:
      - User Profile
      summary: Get a user profile
      operationId: get_profile
      parameters:
      - name: user_id
        in: path
        description: The id of the user to retrieve
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      responses:
        "200":
          description: Successfully retrived user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProfile'
        "404":
          description: User doesn't exist
          content: {}
      x-openapi-router-controller: swagger_server.controllers.user_profile_controller
    put:
      tags:
      - User Profile
      summary: Update and replace a user profile
      operationId: update_profile
      parameters:
      - name: user_id
        in: path
        description: The id of the user to update
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserProfile'
        required: true
      responses:
        "200":
          description: Successfully updated user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProfile'
        "404":
          description: User doesn't exist
          content: {}
      x-codegen-request-body-name: User
      x-openapi-router-controller: swagger_server.controllers.user_profile_controller
    post:
      tags:
      - User Profile
      summary: Create a user profile
      operationId: create_profile
      parameters:
      - name: user_id
        in: path
        description: The id of the user to update
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserProfile'
        required: true
      responses:
        "200":
          description: Successfully updated user
          content: {}
        "404":
          description: User doesn't exist
          content: {}
      x-codegen-request-body-name: UserProfile
      x-openapi-router-controller: swagger_server.controllers.user_profile_controller
    delete:
      tags:
      - User Profile
      summary: Remove a user profile
      operationId: remove_profile
      parameters:
      - name: user_id
        in: path
        description: The id of the user to remove
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      responses:
        "202":
          description: Successfully deleted user
          content: {}
        "404":
          description: User doesn't exist
          content: {}
      x-openapi-router-controller: swagger_server.controllers.user_profile_controller
  /user/{user_id}/membership:
    get:
      tags:
      - Membership
      summary: Get current active membership for user
      operationId: get_current
      parameters:
      - name: user_id
        in: path
        description: The id of the user
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      responses:
        "200":
          description: Successfully retrived user's Membership
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Membership'
        "404":
          description: Active membership does not exist
          content: {}
      x-openapi-router-controller: swagger_server.controllers.membership_controller
    put:
      tags:
      - Membership
      summary: Update a membership
      operationId: update_membership
      parameters:
      - name: user_id
        in: path
        description: The id of the user
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Membership'
        required: true
      responses:
        "200":
          description: Successfully updated membership
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Membership'
        "404":
          description: User doesn't exist
          content: {}
      x-openapi-router-controller: swagger_server.controllers.membership_controller
    post:
      tags:
      - Membership
      summary: Create new membership
      operationId: create_membership
      parameters:
      - name: user_id
        in: path
        description: The id of the user
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Membership'
        required: true
      responses:
        "200":
          description: Successfully created a new membership
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Membership'
        "404":
          description: User doesn't exist
          content: {}
      x-openapi-router-controller: swagger_server.controllers.membership_controller
    delete:
      tags:
      - Membership
      summary: Cancel the current membership by setting its end_date to today
      operationId: cancel_membership
      parameters:
      - name: user_id
        in: path
        description: The id of the user
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      responses:
        "200":
          description: Successfully cancelled a membership
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Membership'
        "404":
          description: User doesn't exist
          content: {}
      x-openapi-router-controller: swagger_server.controllers.membership_controller
  /user/{user_id}/benefits:
    get:
      tags:
      - Membership
      summary: Get all benefits available for a user
      operationId: get_benefits
      parameters:
      - name: user_id
        in: path
        description: The id of the user
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      responses:
        "200":
          description: Successfully retrived user's benefits
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Benefits'
        "404":
          description: User doesn't exist
          content: {}
      x-openapi-router-controller: swagger_server.controllers.membership_controller
  /user/{user_id}/insurance_policy:
    get:
      tags:
      - Insurance Policy
      summary: Get active policies
      operationId: get_active
      parameters:
      - name: user_id
        in: path
        description: The id of the user
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      responses:
        "200":
          description: Retrieves all insurance Policys for the user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InsurancePolicies'
      x-openapi-router-controller: swagger_server.controllers.insurance_policy_controller
    put:
      tags:
      - Insurance Policy
      summary: Update policy
      operationId: update
      parameters:
      - name: user_id
        in: path
        description: The id of the user
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      requestBody:
        description: Policy to create
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InsurancePolicy'
        required: true
      responses:
        "201":
          description: Policy Created
          content: {}
      x-codegen-request-body-name: body
      x-openapi-router-controller: swagger_server.controllers.insurance_policy_controller
    post:
      tags:
      - Insurance Policy
      summary: Create new policy
      operationId: create_package
      parameters:
      - name: user_id
        in: path
        description: The id of the user
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      requestBody:
        description: Policy to create
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InsurancePolicy'
        required: true
      responses:
        "201":
          description: Policy Created
          content: {}
      x-codegen-request-body-name: body
      x-openapi-router-controller: swagger_server.controllers.insurance_policy_controller
  /user/{user_id}/insurance_policy/{package_id}:
    get:
      tags:
      - Insurance Policy
      summary: Gets all policies for a user
      operationId: get_all
      parameters:
      - name: user_id
        in: path
        description: The id of the user
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      - name: package_id
        in: path
        description: The id of the insurance Policy
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      responses:
        "200":
          description: Policy retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InsurancePolicy'
      x-openapi-router-controller: swagger_server.controllers.insurance_policy_controller
    delete:
      tags:
      - Insurance Policy
      summary: Delete application
      operationId: delete_package
      parameters:
      - name: user_id
        in: path
        description: The id of the user to remove
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      - name: package_id
        in: path
        description: The id of the insurance Policy
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      responses:
        "202":
          description: Successfully deleted policy
          content: {}
        "404":
          description: Policy doesn't exist
          content: {}
      x-openapi-router-controller: swagger_server.controllers.insurance_policy_controller
  /user/{user_id}/quote:
    get:
      tags:
      - Quotes
      summary: Get all quotes for a user
      operationId: get_for_user
      parameters:
      - name: user_id
        in: path
        description: The id of the user
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      responses:
        "200":
          description: Successfully retrived quotes for user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Quotes'
        "404":
          description: User doesn't exist
          content: {}
      x-openapi-router-controller: swagger_server.controllers.quotes_controller
    post:
      tags:
      - Quotes
      summary: Create a new quote
      operationId: new_quote
      parameters:
      - name: user_id
        in: path
        description: The id of the user for whome to quote
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Quote'
        required: true
      responses:
        "200":
          description: Successfully retrived user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Quote'
        "404":
          description: User doesn't exist
          content: {}
      x-openapi-router-controller: swagger_server.controllers.quotes_controller
  /quote/{quote_id}:
    get:
      tags:
      - Quotes
      summary: Get quote by id
      operationId: get_quote
      parameters:
      - name: quote_id
        in: path
        description: The id of the quote
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      responses:
        "200":
          description: Successfully retrived quote
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Quote'
        "404":
          description: Quote doesn't exist
          content: {}
      x-openapi-router-controller: swagger_server.controllers.quotes_controller
    put:
      tags:
      - Quotes
      summary: Update a quote
      operationId: update_quote
      parameters:
      - name: quote_id
        in: path
        description: The id of the quote to update
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Quote'
        required: true
      responses:
        "200":
          description: Successfully retrived user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Quote'
        "404":
          description: User doesn't exist
          content: {}
      x-openapi-router-controller: swagger_server.controllers.quotes_controller
    delete:
      tags:
      - Quotes
      summary: Delete quote
      operationId: delete_quote
      parameters:
      - name: quote_id
        in: path
        description: The id of the quote to remove
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      responses:
        "202":
          description: Successfully deleted quote
          content: {}
        "404":
          description: Policy doesn't exist
          content: {}
      x-openapi-router-controller: swagger_server.controllers.quotes_controller
components:
  schemas:
    InsurancePolicies:
      type: array
      items:
        $ref: '#/components/schemas/InsurancePolicy'
    Benefits:
      type: array
      items:
        $ref: '#/components/schemas/Benefit'
    Quotes:
      type: array
      items:
        $ref: '#/components/schemas/Quote'
    User:
      required:
      - email
      type: object
      properties:
        id:
          type: integer
        email:
          type: string
          format: email
        password:
          type: string
      example:
        password: bob
        email: bob@bob.bob
    UserProfile:
      type: object
      properties:
        user_id:
          type: integer
        personal_details:
          $ref: '#/components/schemas/PersonalDetails'
        driver_history:
          $ref: '#/components/schemas/DriverHistory'
      example:
        user_id: 0
        driver_history:
          licence_no: licence_no
          licence_type: Full
          previous_claims:
          - date: 2000-01-23
            driver_history_id: 7
            fault: Self
            claim_type: Accident
            id: 2
          - date: 2000-01-23
            driver_history_id: 7
            fault: Self
            claim_type: Accident
            id: 2
          license_since: 2000-01-23
          id: 5
        personal_details:
          full_name: full_name
          address:
            town: town
            street: street
            county: county
            postcode: postcode
            number_or_name: number_or_name
            id: 1
          relationship_status: Single
          home_owner: true
          dob: 2000-01-23
          dependents: 5
          id: 6
          employment_status: FullTime
    PersonalDetails:
      properties:
        id:
          type: integer
        full_name:
          type: string
        address:
          $ref: '#/components/schemas/Address'
        dob:
          type: string
          format: date
        relationship_status:
          type: string
          nullable: true
          enum:
          - Single
          - Married
          - null
        home_owner:
          type: boolean
          nullable: true
        dependents:
          type: integer
          description: Number of dependents under the age of 16
        employment_status:
          type: string
          nullable: true
          enum:
          - FullTime
          - PartTime
          - Unemployed
          - Retired
          - Student
          - null
      example:
        full_name: full_name
        address:
          town: town
          street: street
          county: county
          postcode: postcode
          number_or_name: number_or_name
          id: 1
        relationship_status: Single
        home_owner: true
        dob: 2000-01-23
        dependents: 5
        id: 6
        employment_status: FullTime
    Membership:
      required:
      - end_date
      - start_date
      - type
      properties:
        id:
          type: integer
        user_id:
          type: integer
        start_date:
          type: string
          format: date
        end_date:
          type: string
          format: date
        type:
          $ref: '#/components/schemas/MembershipType'
      example:
        end_date: 2000-01-23
        user_id: 6
        id: 0
        type: Smart
        start_date: 2000-01-23
    InsurancePolicy:
      properties:
        id:
          type: integer
        user_id:
          type: integer
        type:
          $ref: '#/components/schemas/InsuranceType'
        start_date:
          type: string
          format: date
        end_date:
          type: string
          format: date
      example:
        end_date: 2000-01-23
        user_id: 6
        id: 0
        type: Home
        start_date: 2000-01-23
    Quote:
      required:
      - type
      properties:
        id:
          type: integer
        user_id:
          type: integer
        type:
          $ref: '#/components/schemas/InsuranceType'
        created:
          type: integer
        updated:
          type: integer
        is_complete:
          type: boolean
        price:
          type: number
          nullable: true
        sections:
          discriminator:
            propertyName: quote_type
          oneOf:
          - $ref: '#/components/schemas/VehicleQuoteSections'
          - $ref: '#/components/schemas/HomeQuoteSections'
      example:
        user_id: 6
        created: 1
        price: 5.63737665663332876420099637471139430999755859375
        id: 0
        is_complete: true
        type: Home
        updated: 5
        sections: ""
    QuoteSections:
      type: object
      properties:
        quote_id:
          type: integer
        quote_type:
          $ref: '#/components/schemas/InsuranceType'
      discriminator:
        propertyName: quote_type
    VehicleQuoteSections:
      allOf:
      - $ref: '#/components/schemas/QuoteSections'
      - type: object
        properties:
          driver_details:
            $ref: '#/components/schemas/DriverDetails'
          vehicle_details:
            $ref: '#/components/schemas/VehicleDetails'
          vehicle_usage:
            $ref: '#/components/schemas/VehicleUsage'
          additional_drivers:
            type: array
            items:
              $ref: '#/components/schemas/DriverDetails'
    HomeQuoteSections:
      allOf:
      - $ref: '#/components/schemas/QuoteSections'
      - type: object
        properties:
          personal_details:
            $ref: '#/components/schemas/PersonalDetails'
          home_details:
            $ref: '#/components/schemas/HomeDetails'
    VehicleDetails:
      properties:
        quote_id:
          type: integer
        alarm_fitter:
          type: boolean
          nullable: true
        immobilizer_fitted:
          type: boolean
          nullable: true
        tracking_device_fitted:
          type: boolean
          nullable: true
        is_import:
          type: boolean
          nullable: true
        off_side_drive:
          type: boolean
          nullable: true
        number_of_seats:
          type: number
          nullable: true
        current_value:
          type: number
          nullable: true
        is_modified:
          type: boolean
          nullable: true
    VehicleUsage:
      properties:
        usage:
          type: string
          nullable: true
          enum:
          - SDP
          - SDPC
          - SDPCB
          - null
        annual_milage:
          type: integer
        day_storage:
          type: string
          nullable: true
          enum:
          - Home
          - CarParkOffice
          - CarParkPublic
          - StreetAwayFromHome
          - null
        night_storage:
          type: string
          nullable: true
          enum:
          - Drive
          - StreetOutsideHome
          - StreetAwayFromHome
          - Garage
          - null
        night_storage_at_home:
          type: boolean
          nullable: true
        night_storage_address:
          $ref: '#/components/schemas/Address'
    DriverDetails:
      properties:
        id:
          type: integer
        personal_details:
          $ref: '#/components/schemas/PersonalDetails'
        driver_history:
          $ref: '#/components/schemas/DriverHistory'
    DriverHistory:
      properties:
        id:
          type: integer
        licence_type:
          type: string
          enum:
          - Full
          - Provisional
          - null
        license_since:
          type: string
          format: date
        licence_no:
          type: string
        previous_claims:
          type: array
          items:
            $ref: '#/components/schemas/PreviousClaim'
      example:
        licence_no: licence_no
        licence_type: Full
        previous_claims:
        - date: 2000-01-23
          driver_history_id: 7
          fault: Self
          claim_type: Accident
          id: 2
        - date: 2000-01-23
          driver_history_id: 7
          fault: Self
          claim_type: Accident
          id: 2
        license_since: 2000-01-23
        id: 5
    PreviousClaim:
      properties:
        id:
          type: integer
        driver_history_id:
          type: integer
        date:
          type: string
          format: date
        fault:
          type: string
          enum:
          - Self
          - ThirdParty
        claim_type:
          type: string
          enum:
          - Accident
          - Theft
      example:
        date: 2000-01-23
        driver_history_id: 7
        fault: Self
        claim_type: Accident
        id: 2
    HomeDetails:
      properties:
        address:
          $ref: '#/components/schemas/Address'
    Address:
      properties:
        id:
          type: integer
        number_or_name:
          type: string
        street:
          type: string
        town:
          type: string
        county:
          type: string
        postcode:
          type: string
      example:
        town: town
        street: street
        county: county
        postcode: postcode
        number_or_name: number_or_name
        id: 1
    Benefit:
      required:
      - min_membership
      - name
      properties:
        name:
          type: string
        min_membership:
          $ref: '#/components/schemas/MembershipType'
        max_membership:
          $ref: '#/components/schemas/MembershipType'
      example:
        max_membership: null
        name: name
        min_membership: Smart
    MembershipType:
      type: string
      enum:
      - Smart
      - Silver
      - Gold
    InsuranceType:
      type: string
      enum:
      - Home
      - Motor
    inline_response_200:
      properties:
        user_id:
          type: integer
        authenticated:
          type: boolean
      example:
        authenticated: true
        user_id: 0
    inline_response_200_1:
      properties:
        user_id:
          type: integer
      example:
        user_id: 0
  securitySchemes:
    api_key:
      type: apiKey
      name: X-Auth
      in: header
      x-apikeyInfoFunc: swagger_server.controllers.authorization_controller.check_api_key

