# coding: utf-8

"""
    Smart Insurance System

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ClaimNote(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'claim_id': 'int',
        'comment': 'str',
        'created': 'int',
        'claim_status': 'ClaimStatus',
        'attachments': 'Attachments'
    }

    attribute_map = {
        'id': 'id',
        'claim_id': 'claim_id',
        'comment': 'comment',
        'created': 'created',
        'claim_status': 'claim_status',
        'attachments': 'attachments'
    }

    def __init__(self, id=None, claim_id=None, comment=None, created=None, claim_status=None, attachments=None):  # noqa: E501
        """ClaimNote - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._claim_id = None
        self._comment = None
        self._created = None
        self._claim_status = None
        self._attachments = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if claim_id is not None:
            self.claim_id = claim_id
        if comment is not None:
            self.comment = comment
        if created is not None:
            self.created = created
        if claim_status is not None:
            self.claim_status = claim_status
        if attachments is not None:
            self.attachments = attachments

    @property
    def id(self):
        """Gets the id of this ClaimNote.  # noqa: E501


        :return: The id of this ClaimNote.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ClaimNote.


        :param id: The id of this ClaimNote.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def claim_id(self):
        """Gets the claim_id of this ClaimNote.  # noqa: E501


        :return: The claim_id of this ClaimNote.  # noqa: E501
        :rtype: int
        """
        return self._claim_id

    @claim_id.setter
    def claim_id(self, claim_id):
        """Sets the claim_id of this ClaimNote.


        :param claim_id: The claim_id of this ClaimNote.  # noqa: E501
        :type: int
        """

        self._claim_id = claim_id

    @property
    def comment(self):
        """Gets the comment of this ClaimNote.  # noqa: E501


        :return: The comment of this ClaimNote.  # noqa: E501
        :rtype: str
        """
        return self._comment

    @comment.setter
    def comment(self, comment):
        """Sets the comment of this ClaimNote.


        :param comment: The comment of this ClaimNote.  # noqa: E501
        :type: str
        """

        self._comment = comment

    @property
    def created(self):
        """Gets the created of this ClaimNote.  # noqa: E501


        :return: The created of this ClaimNote.  # noqa: E501
        :rtype: int
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this ClaimNote.


        :param created: The created of this ClaimNote.  # noqa: E501
        :type: int
        """

        self._created = created

    @property
    def claim_status(self):
        """Gets the claim_status of this ClaimNote.  # noqa: E501


        :return: The claim_status of this ClaimNote.  # noqa: E501
        :rtype: ClaimStatus
        """
        return self._claim_status

    @claim_status.setter
    def claim_status(self, claim_status):
        """Sets the claim_status of this ClaimNote.


        :param claim_status: The claim_status of this ClaimNote.  # noqa: E501
        :type: ClaimStatus
        """

        self._claim_status = claim_status

    @property
    def attachments(self):
        """Gets the attachments of this ClaimNote.  # noqa: E501


        :return: The attachments of this ClaimNote.  # noqa: E501
        :rtype: Attachments
        """
        return self._attachments

    @attachments.setter
    def attachments(self, attachments):
        """Sets the attachments of this ClaimNote.


        :param attachments: The attachments of this ClaimNote.  # noqa: E501
        :type: Attachments
        """

        self._attachments = attachments

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ClaimNote, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ClaimNote):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
