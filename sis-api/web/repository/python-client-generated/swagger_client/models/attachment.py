# coding: utf-8

"""
    Smart Insurance System

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Attachment(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'claim_note_id': 'int',
        'name': 'str',
        'mime_type': 'str',
        'data': 'str'
    }

    attribute_map = {
        'claim_note_id': 'claim_note_id',
        'name': 'name',
        'mime_type': 'mime_type',
        'data': 'data'
    }

    def __init__(self, claim_note_id=None, name=None, mime_type=None, data=None):  # noqa: E501
        """Attachment - a model defined in Swagger"""  # noqa: E501
        self._claim_note_id = None
        self._name = None
        self._mime_type = None
        self._data = None
        self.discriminator = None
        if claim_note_id is not None:
            self.claim_note_id = claim_note_id
        self.name = name
        if mime_type is not None:
            self.mime_type = mime_type
        self.data = data

    @property
    def claim_note_id(self):
        """Gets the claim_note_id of this Attachment.  # noqa: E501


        :return: The claim_note_id of this Attachment.  # noqa: E501
        :rtype: int
        """
        return self._claim_note_id

    @claim_note_id.setter
    def claim_note_id(self, claim_note_id):
        """Sets the claim_note_id of this Attachment.


        :param claim_note_id: The claim_note_id of this Attachment.  # noqa: E501
        :type: int
        """

        self._claim_note_id = claim_note_id

    @property
    def name(self):
        """Gets the name of this Attachment.  # noqa: E501


        :return: The name of this Attachment.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Attachment.


        :param name: The name of this Attachment.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def mime_type(self):
        """Gets the mime_type of this Attachment.  # noqa: E501


        :return: The mime_type of this Attachment.  # noqa: E501
        :rtype: str
        """
        return self._mime_type

    @mime_type.setter
    def mime_type(self, mime_type):
        """Sets the mime_type of this Attachment.


        :param mime_type: The mime_type of this Attachment.  # noqa: E501
        :type: str
        """

        self._mime_type = mime_type

    @property
    def data(self):
        """Gets the data of this Attachment.  # noqa: E501


        :return: The data of this Attachment.  # noqa: E501
        :rtype: str
        """
        return self._data

    @data.setter
    def data(self, data):
        """Sets the data of this Attachment.


        :param data: The data of this Attachment.  # noqa: E501
        :type: str
        """
        if data is None:
            raise ValueError("Invalid value for `data`, must not be `None`")  # noqa: E501

        self._data = data

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Attachment, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Attachment):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
