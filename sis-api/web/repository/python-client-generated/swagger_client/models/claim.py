# coding: utf-8

"""
    Smart Insurance System

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Claim(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'package_id': 'int',
        'timestamp': 'int',
        'incident_date': 'date',
        'resolution_date': 'int',
        'summary': 'str',
        'claim_status': 'ClaimStatus',
        'claim_history': 'ClaimHistory'
    }

    attribute_map = {
        'id': 'id',
        'package_id': 'package_id',
        'timestamp': 'timestamp',
        'incident_date': 'incident_date',
        'resolution_date': 'resolution_date',
        'summary': 'summary',
        'claim_status': 'claim_status',
        'claim_history': 'claim_history'
    }

    def __init__(self, id=None, package_id=None, timestamp=None, incident_date=None, resolution_date=None, summary=None, claim_status=None, claim_history=None):  # noqa: E501
        """Claim - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._package_id = None
        self._timestamp = None
        self._incident_date = None
        self._resolution_date = None
        self._summary = None
        self._claim_status = None
        self._claim_history = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if package_id is not None:
            self.package_id = package_id
        if timestamp is not None:
            self.timestamp = timestamp
        self.incident_date = incident_date
        if resolution_date is not None:
            self.resolution_date = resolution_date
        self.summary = summary
        if claim_status is not None:
            self.claim_status = claim_status
        self.claim_history = claim_history

    @property
    def id(self):
        """Gets the id of this Claim.  # noqa: E501


        :return: The id of this Claim.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Claim.


        :param id: The id of this Claim.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def package_id(self):
        """Gets the package_id of this Claim.  # noqa: E501


        :return: The package_id of this Claim.  # noqa: E501
        :rtype: int
        """
        return self._package_id

    @package_id.setter
    def package_id(self, package_id):
        """Sets the package_id of this Claim.


        :param package_id: The package_id of this Claim.  # noqa: E501
        :type: int
        """

        self._package_id = package_id

    @property
    def timestamp(self):
        """Gets the timestamp of this Claim.  # noqa: E501


        :return: The timestamp of this Claim.  # noqa: E501
        :rtype: int
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """Sets the timestamp of this Claim.


        :param timestamp: The timestamp of this Claim.  # noqa: E501
        :type: int
        """

        self._timestamp = timestamp

    @property
    def incident_date(self):
        """Gets the incident_date of this Claim.  # noqa: E501


        :return: The incident_date of this Claim.  # noqa: E501
        :rtype: date
        """
        return self._incident_date

    @incident_date.setter
    def incident_date(self, incident_date):
        """Sets the incident_date of this Claim.


        :param incident_date: The incident_date of this Claim.  # noqa: E501
        :type: date
        """
        if incident_date is None:
            raise ValueError("Invalid value for `incident_date`, must not be `None`")  # noqa: E501

        self._incident_date = incident_date

    @property
    def resolution_date(self):
        """Gets the resolution_date of this Claim.  # noqa: E501


        :return: The resolution_date of this Claim.  # noqa: E501
        :rtype: int
        """
        return self._resolution_date

    @resolution_date.setter
    def resolution_date(self, resolution_date):
        """Sets the resolution_date of this Claim.


        :param resolution_date: The resolution_date of this Claim.  # noqa: E501
        :type: int
        """

        self._resolution_date = resolution_date

    @property
    def summary(self):
        """Gets the summary of this Claim.  # noqa: E501


        :return: The summary of this Claim.  # noqa: E501
        :rtype: str
        """
        return self._summary

    @summary.setter
    def summary(self, summary):
        """Sets the summary of this Claim.


        :param summary: The summary of this Claim.  # noqa: E501
        :type: str
        """
        if summary is None:
            raise ValueError("Invalid value for `summary`, must not be `None`")  # noqa: E501

        self._summary = summary

    @property
    def claim_status(self):
        """Gets the claim_status of this Claim.  # noqa: E501


        :return: The claim_status of this Claim.  # noqa: E501
        :rtype: ClaimStatus
        """
        return self._claim_status

    @claim_status.setter
    def claim_status(self, claim_status):
        """Sets the claim_status of this Claim.


        :param claim_status: The claim_status of this Claim.  # noqa: E501
        :type: ClaimStatus
        """

        self._claim_status = claim_status

    @property
    def claim_history(self):
        """Gets the claim_history of this Claim.  # noqa: E501


        :return: The claim_history of this Claim.  # noqa: E501
        :rtype: ClaimHistory
        """
        return self._claim_history

    @claim_history.setter
    def claim_history(self, claim_history):
        """Sets the claim_history of this Claim.


        :param claim_history: The claim_history of this Claim.  # noqa: E501
        :type: ClaimHistory
        """
        if claim_history is None:
            raise ValueError("Invalid value for `claim_history`, must not be `None`")  # noqa: E501

        self._claim_history = claim_history

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Claim, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Claim):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
