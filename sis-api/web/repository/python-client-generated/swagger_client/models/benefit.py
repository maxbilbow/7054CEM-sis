# coding: utf-8

"""
    Smart Insurance System

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Benefit(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'min_status': 'MembershipType',
        'max_status': 'MembershipType'
    }

    attribute_map = {
        'name': 'name',
        'min_status': 'min_status',
        'max_status': 'max_status'
    }

    def __init__(self, name=None, min_status=None, max_status=None):  # noqa: E501
        """Benefit - a model defined in Swagger"""  # noqa: E501
        self._name = None
        self._min_status = None
        self._max_status = None
        self.discriminator = None
        if name is not None:
            self.name = name
        if min_status is not None:
            self.min_status = min_status
        if max_status is not None:
            self.max_status = max_status

    @property
    def name(self):
        """Gets the name of this Benefit.  # noqa: E501


        :return: The name of this Benefit.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Benefit.


        :param name: The name of this Benefit.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def min_status(self):
        """Gets the min_status of this Benefit.  # noqa: E501


        :return: The min_status of this Benefit.  # noqa: E501
        :rtype: MembershipType
        """
        return self._min_status

    @min_status.setter
    def min_status(self, min_status):
        """Sets the min_status of this Benefit.


        :param min_status: The min_status of this Benefit.  # noqa: E501
        :type: MembershipType
        """

        self._min_status = min_status

    @property
    def max_status(self):
        """Gets the max_status of this Benefit.  # noqa: E501


        :return: The max_status of this Benefit.  # noqa: E501
        :rtype: MembershipType
        """
        return self._max_status

    @max_status.setter
    def max_status(self, max_status):
        """Sets the max_status of this Benefit.


        :param max_status: The max_status of this Benefit.  # noqa: E501
        :type: MembershipType
        """

        self._max_status = max_status

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Benefit, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Benefit):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
