# coding: utf-8

"""
    Smart Insurance System

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class UserProfile(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'user_id': 'int',
        'role': 'Role',
        'points': 'int',
        'membership': 'Membership',
        'benifits': 'Benefits',
        'insurance_packages': 'InsurancePackages'
    }

    attribute_map = {
        'user_id': 'user_id',
        'role': 'role',
        'points': 'points',
        'membership': 'membership',
        'benifits': 'benifits',
        'insurance_packages': 'insurance_packages'
    }

    def __init__(self, user_id=None, role=None, points=None, membership=None, benifits=None, insurance_packages=None):  # noqa: E501
        """UserProfile - a model defined in Swagger"""  # noqa: E501
        self._user_id = None
        self._role = None
        self._points = None
        self._membership = None
        self._benifits = None
        self._insurance_packages = None
        self.discriminator = None
        if user_id is not None:
            self.user_id = user_id
        if role is not None:
            self.role = role
        if points is not None:
            self.points = points
        if membership is not None:
            self.membership = membership
        if benifits is not None:
            self.benifits = benifits
        if insurance_packages is not None:
            self.insurance_packages = insurance_packages

    @property
    def user_id(self):
        """Gets the user_id of this UserProfile.  # noqa: E501


        :return: The user_id of this UserProfile.  # noqa: E501
        :rtype: int
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this UserProfile.


        :param user_id: The user_id of this UserProfile.  # noqa: E501
        :type: int
        """

        self._user_id = user_id

    @property
    def role(self):
        """Gets the role of this UserProfile.  # noqa: E501


        :return: The role of this UserProfile.  # noqa: E501
        :rtype: Role
        """
        return self._role

    @role.setter
    def role(self, role):
        """Sets the role of this UserProfile.


        :param role: The role of this UserProfile.  # noqa: E501
        :type: Role
        """

        self._role = role

    @property
    def points(self):
        """Gets the points of this UserProfile.  # noqa: E501


        :return: The points of this UserProfile.  # noqa: E501
        :rtype: int
        """
        return self._points

    @points.setter
    def points(self, points):
        """Sets the points of this UserProfile.


        :param points: The points of this UserProfile.  # noqa: E501
        :type: int
        """

        self._points = points

    @property
    def membership(self):
        """Gets the membership of this UserProfile.  # noqa: E501


        :return: The membership of this UserProfile.  # noqa: E501
        :rtype: Membership
        """
        return self._membership

    @membership.setter
    def membership(self, membership):
        """Sets the membership of this UserProfile.


        :param membership: The membership of this UserProfile.  # noqa: E501
        :type: Membership
        """

        self._membership = membership

    @property
    def benifits(self):
        """Gets the benifits of this UserProfile.  # noqa: E501


        :return: The benifits of this UserProfile.  # noqa: E501
        :rtype: Benefits
        """
        return self._benifits

    @benifits.setter
    def benifits(self, benifits):
        """Sets the benifits of this UserProfile.


        :param benifits: The benifits of this UserProfile.  # noqa: E501
        :type: Benefits
        """

        self._benifits = benifits

    @property
    def insurance_packages(self):
        """Gets the insurance_packages of this UserProfile.  # noqa: E501


        :return: The insurance_packages of this UserProfile.  # noqa: E501
        :rtype: InsurancePackages
        """
        return self._insurance_packages

    @insurance_packages.setter
    def insurance_packages(self, insurance_packages):
        """Sets the insurance_packages of this UserProfile.


        :param insurance_packages: The insurance_packages of this UserProfile.  # noqa: E501
        :type: InsurancePackages
        """

        self._insurance_packages = insurance_packages

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(UserProfile, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UserProfile):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
