# coding: utf-8

"""
    Smart Insurance System

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class ClaimHistoryApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def add_note(self, body, claim_id, **kwargs):  # noqa: E501
        """Add note  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_note(body, claim_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ClaimNote body: (required)
        :param int claim_id: The id of the claim (required)
        :return: ClaimNote
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.add_note_with_http_info(body, claim_id, **kwargs)  # noqa: E501
        else:
            (data) = self.add_note_with_http_info(body, claim_id, **kwargs)  # noqa: E501
            return data

    def add_note_with_http_info(self, body, claim_id, **kwargs):  # noqa: E501
        """Add note  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_note_with_http_info(body, claim_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ClaimNote body: (required)
        :param int claim_id: The id of the claim (required)
        :return: ClaimNote
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'claim_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_note" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `add_note`")  # noqa: E501
        # verify the required parameter 'claim_id' is set
        if ('claim_id' not in params or
                params['claim_id'] is None):
            raise ValueError("Missing the required parameter `claim_id` when calling `add_note`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'claim_id' in params:
            path_params['claim_id'] = params['claim_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/claim/{claim_id}/history', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ClaimNote',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_history(self, claim_id, **kwargs):  # noqa: E501
        """Get history for a claim  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_history(claim_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int claim_id: The id of the claim (required)
        :return: ClaimHistory
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_history_with_http_info(claim_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_history_with_http_info(claim_id, **kwargs)  # noqa: E501
            return data

    def get_history_with_http_info(self, claim_id, **kwargs):  # noqa: E501
        """Get history for a claim  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_history_with_http_info(claim_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int claim_id: The id of the claim (required)
        :return: ClaimHistory
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['claim_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_history" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'claim_id' is set
        if ('claim_id' not in params or
                params['claim_id'] is None):
            raise ValueError("Missing the required parameter `claim_id` when calling `get_history`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'claim_id' in params:
            path_params['claim_id'] = params['claim_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/claim/{claim_id}/history', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ClaimHistory',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_note(self, note_id, **kwargs):  # noqa: E501
        """Get claim note  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_note(note_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int note_id: The id of the history item (required)
        :return: ClaimNote
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_note_with_http_info(note_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_note_with_http_info(note_id, **kwargs)  # noqa: E501
            return data

    def get_note_with_http_info(self, note_id, **kwargs):  # noqa: E501
        """Get claim note  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_note_with_http_info(note_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int note_id: The id of the history item (required)
        :return: ClaimNote
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['note_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_note" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'note_id' is set
        if ('note_id' not in params or
                params['note_id'] is None):
            raise ValueError("Missing the required parameter `note_id` when calling `get_note`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'note_id' in params:
            path_params['note_id'] = params['note_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/claim-history/{note_id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ClaimNote',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
