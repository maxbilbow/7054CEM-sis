# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.attachments import Attachments  # noqa: F401,E501
from swagger_server.models.claim_status import ClaimStatus  # noqa: F401,E501
from swagger_server import util


class ClaimNote(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, id: int=None, claim_id: int=None, comment: str=None, created: int=None, claim_status: ClaimStatus=None, attachments: Attachments=None):  # noqa: E501
        """ClaimNote - a model defined in Swagger

        :param id: The id of this ClaimNote.  # noqa: E501
        :type id: int
        :param claim_id: The claim_id of this ClaimNote.  # noqa: E501
        :type claim_id: int
        :param comment: The comment of this ClaimNote.  # noqa: E501
        :type comment: str
        :param created: The created of this ClaimNote.  # noqa: E501
        :type created: int
        :param claim_status: The claim_status of this ClaimNote.  # noqa: E501
        :type claim_status: ClaimStatus
        :param attachments: The attachments of this ClaimNote.  # noqa: E501
        :type attachments: Attachments
        """
        self.swagger_types = {
            'id': int,
            'claim_id': int,
            'comment': str,
            'created': int,
            'claim_status': ClaimStatus,
            'attachments': Attachments
        }

        self.attribute_map = {
            'id': 'id',
            'claim_id': 'claim_id',
            'comment': 'comment',
            'created': 'created',
            'claim_status': 'claim_status',
            'attachments': 'attachments'
        }
        self._id = id
        self._claim_id = claim_id
        self._comment = comment
        self._created = created
        self._claim_status = claim_status
        self._attachments = attachments

    @classmethod
    def from_dict(cls, dikt) -> 'ClaimNote':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The ClaimNote of this ClaimNote.  # noqa: E501
        :rtype: ClaimNote
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self) -> int:
        """Gets the id of this ClaimNote.


        :return: The id of this ClaimNote.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id: int):
        """Sets the id of this ClaimNote.


        :param id: The id of this ClaimNote.
        :type id: int
        """

        self._id = id

    @property
    def claim_id(self) -> int:
        """Gets the claim_id of this ClaimNote.


        :return: The claim_id of this ClaimNote.
        :rtype: int
        """
        return self._claim_id

    @claim_id.setter
    def claim_id(self, claim_id: int):
        """Sets the claim_id of this ClaimNote.


        :param claim_id: The claim_id of this ClaimNote.
        :type claim_id: int
        """

        self._claim_id = claim_id

    @property
    def comment(self) -> str:
        """Gets the comment of this ClaimNote.


        :return: The comment of this ClaimNote.
        :rtype: str
        """
        return self._comment

    @comment.setter
    def comment(self, comment: str):
        """Sets the comment of this ClaimNote.


        :param comment: The comment of this ClaimNote.
        :type comment: str
        """

        self._comment = comment

    @property
    def created(self) -> int:
        """Gets the created of this ClaimNote.


        :return: The created of this ClaimNote.
        :rtype: int
        """
        return self._created

    @created.setter
    def created(self, created: int):
        """Sets the created of this ClaimNote.


        :param created: The created of this ClaimNote.
        :type created: int
        """

        self._created = created

    @property
    def claim_status(self) -> ClaimStatus:
        """Gets the claim_status of this ClaimNote.


        :return: The claim_status of this ClaimNote.
        :rtype: ClaimStatus
        """
        return self._claim_status

    @claim_status.setter
    def claim_status(self, claim_status: ClaimStatus):
        """Sets the claim_status of this ClaimNote.


        :param claim_status: The claim_status of this ClaimNote.
        :type claim_status: ClaimStatus
        """

        self._claim_status = claim_status

    @property
    def attachments(self) -> Attachments:
        """Gets the attachments of this ClaimNote.


        :return: The attachments of this ClaimNote.
        :rtype: Attachments
        """
        return self._attachments

    @attachments.setter
    def attachments(self, attachments: Attachments):
        """Sets the attachments of this ClaimNote.


        :param attachments: The attachments of this ClaimNote.
        :type attachments: Attachments
        """

        self._attachments = attachments
