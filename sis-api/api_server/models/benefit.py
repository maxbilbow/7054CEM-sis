# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from api_server.models.base_model_ import Model
from api_server.models.membership_type import MembershipType  # noqa: F401,E501
from api_server import util


class Benefit(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, name: str=None, min_status: MembershipType=None, max_status: MembershipType=None):  # noqa: E501
        """Benefit - a model defined in Swagger

        :param name: The name of this Benefit.  # noqa: E501
        :type name: str
        :param min_status: The min_status of this Benefit.  # noqa: E501
        :type min_status: MembershipType
        :param max_status: The max_status of this Benefit.  # noqa: E501
        :type max_status: MembershipType
        """
        self.swagger_types = {
            'name': str,
            'min_status': MembershipType,
            'max_status': MembershipType
        }

        self.attribute_map = {
            'name': 'name',
            'min_status': 'min_status',
            'max_status': 'max_status'
        }
        self._name = name
        self._min_status = min_status
        self._max_status = max_status

    @classmethod
    def from_dict(cls, dikt) -> 'Benefit':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Benefit of this Benefit.  # noqa: E501
        :rtype: Benefit
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self) -> str:
        """Gets the name of this Benefit.


        :return: The name of this Benefit.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this Benefit.


        :param name: The name of this Benefit.
        :type name: str
        """

        self._name = name

    @property
    def min_status(self) -> MembershipType:
        """Gets the min_status of this Benefit.


        :return: The min_status of this Benefit.
        :rtype: MembershipType
        """
        return self._min_status

    @min_status.setter
    def min_status(self, min_status: MembershipType):
        """Sets the min_status of this Benefit.


        :param min_status: The min_status of this Benefit.
        :type min_status: MembershipType
        """

        self._min_status = min_status

    @property
    def max_status(self) -> MembershipType:
        """Gets the max_status of this Benefit.


        :return: The max_status of this Benefit.
        :rtype: MembershipType
        """
        return self._max_status

    @max_status.setter
    def max_status(self, max_status: MembershipType):
        """Sets the max_status of this Benefit.


        :param max_status: The max_status of this Benefit.
        :type max_status: MembershipType
        """

        self._max_status = max_status
