openapi: 3.0.1
info:
  title: Smart Insurance System
  version: 1.0.0
servers:
  - url: /api/v1
tags:
  - name: User
  - name: User Profile
  - name: Quotes
  - name: Membership
  - name: Insurance Policy
  - name: Authorization
paths:
  /secret:
    get:
      tags:
        - Authorization
      summary: Return secret string
      operationId: get_secret
      responses:
        '200':
          description: secret response
          content:
            '*/*':
              schema:
                type: string
      security:
        - api_key: [ ]
  /user-id/{email}:
    get:
      tags:
        - User
      summary: Get a user id by email
      operationId: find_by_email
      parameters:
        - name: email
          in: path
          description: The email of the user to retrieve
          required: true
          schema:
            type: string
            format: email
      responses:
        200:
          description: Successfully retrived user
          content:
            application/json:
              schema:
                type: integer
        404:
          description: User doesn't exist for email
          content: { }
  /user/verify:
    post:
      tags:
        - User
      summary: Verify user credentials and return user id
      operationId: check_credentials
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        required: true
      responses:
        200:
          description: Successfully retrived user
          content:
            application/json:
              schema:
                properties:
                  user_id:
                    type: integer
                  authenticated:
                    type: boolean
        404:
          description: User doesn't exist for email
          content: { }
        401:
          description: User is not authorised
          content: { }
  /user:
    post:
      tags:
        - User
      summary: Create a user
      operationId: create_user
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        required: true
      responses:
        200:
          description: Successfully updated user
          content:
            application/json:
              schema:
                properties:
                  user_id:
                    type: integer
        404:
          description: User doesn't exist
          content: { }
      x-codegen-request-body-name: User
  /user/{user_id}:
    get:
      tags:
        - User
      summary: Get a user
      operationId: get_user
      parameters:
        - name: user_id
          in: path
          description: The id of the user to retrieve
          required: true
          schema:
            type: integer
      responses:
        200:
          description: Successfully retrived user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        404:
          description: User doesn't exist
          content: { }
    put:
      tags:
        - User
      summary: Update and replace a user
      operationId: update_user
      parameters:
        - name: user_id
          in: path
          description: The id of the user to retrieve
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        required: true
      responses:
        200:
          description: Successfully updated user
          content: { }
        404:
          description: User doesn't exist
          content: { }
      x-codegen-request-body-name: User
    delete:
      tags:
        - User
      summary: Remove a user
      operationId: remove_user
      parameters:
        - name: user_id
          in: path
          description: The id of the user to remove
          required: true
          schema:
            type: integer
      responses:
        202:
          description: Successfully deleted user
          content: { }
        404:
          description: User doesn't exist
          content: { }
  /user/{user_id}/profile:
    get:
      tags:
        - User Profile
      summary: Get a user profile
      operationId: get_profile
      parameters:
        - name: user_id
          in: path
          description: The id of the user to retrieve
          required: true
          schema:
            type: integer
      responses:
        200:
          description: Successfully retrived user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProfile'
        404:
          description: User doesn't exist
          content: { }
    post:
      tags:
        - User Profile
      summary: Create a user profile
      operationId: create_profile
      parameters:
        - name: user_id
          in: path
          description: The id of the user to update
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserProfile'
        required: true
      responses:
        200:
          description: Successfully updated user
          content: { }
        404:
          description: User doesn't exist
          content: { }
      x-codegen-request-body-name: UserProfile
    put:
      tags:
        - User Profile
      summary: Update and replace a user profile
      operationId: update_profile
      parameters:
        - name: user_id
          in: path
          description: The id of the user to update
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserProfile'
        required: true
      responses:
        200:
          description: Successfully updated user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProfile'
        404:
          description: User doesn't exist
          content: { }
      x-codegen-request-body-name: User
    delete:
      tags:
        - User Profile
      summary: Remove a user profile
      operationId: remove_profile
      parameters:
        - name: user_id
          in: path
          description: The id of the user to remove
          required: true
          schema:
            type: integer
      responses:
        202:
          description: Successfully deleted user
          content: { }
        404:
          description: User doesn't exist
          content: { }
  /user/{user_id}/membership:
    get:
      tags:
        - Membership
      summary: Get current active membership for user
      operationId: get_current
      parameters:
        - name: user_id
          in: path
          description: The id of the user
          required: true
          schema:
            type: integer
      responses:
        200:
          description: Successfully retrived user's Membership
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Membership'
        404:
          description: Active membership does not exist
          content: { }
    post:
      tags:
        - Membership
      summary: Create new membership
      operationId: create_membership
      parameters:
        - name: user_id
          in: path
          description: The id of the user
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Membership'
        required: true
      responses:
        200:
          description: Successfully created a new membership
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Membership'
        404:
          description: User doesn't exist
          content: { }
    put:
      tags:
        - Membership
      summary: Update a membership
      operationId: update_membership
      parameters:
        - name: user_id
          in: path
          description: The id of the user
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Membership'
        required: true
      responses:
        200:
          description: Successfully updated membership
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Membership'
        404:
          description: User doesn't exist
          content: { }
    delete:
      tags:
        - Membership
      summary: Cancel the current membership by setting its end_date to today
      operationId: cancel_membership
      parameters:
        - name: user_id
          in: path
          description: The id of the user
          required: true
          schema:
            type: integer
      responses:
        200:
          description: Successfully cancelled a membership
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Membership'
        404:
          description: User doesn't exist
          content: { }
  /user/{user_id}/benefits:
    get:
      tags:
        - Membership
      summary: Get all benefits available for a user
      operationId: get_benefits
      parameters:
        - name: user_id
          in: path
          description: The id of the user
          required: true
          schema:
            type: integer
      responses:
        200:
          description: Successfully retrived user's benefits
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Benefits'
        404:
          description: User doesn't exist
          content: { }
  /user/{user_id}/insurance_policy:
    get:
      tags:
        - Insurance Policy
      summary: Get active policies
      operationId: get_active
      parameters:
        - name: user_id
          in: path
          description: The id of the user
          required: true
          schema:
            type: integer
      responses:
        200:
          description: Retrieves all insurance Policys for the user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InsurancePolicies'
    post:
      tags:
        - Insurance Policy
      summary: Create new policy
      operationId: create_package
      parameters:
        - name: user_id
          in: path
          description: The id of the user
          required: true
          schema:
            type: integer
      requestBody:
        description: Policy to create
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InsurancePolicy'
        required: true
      responses:
        201:
          description: Policy Created
          content: { }
      x-codegen-request-body-name: body
    put:
      tags:
        - Insurance Policy
      summary: Update policy
      operationId: update
      parameters:
        - name: user_id
          in: path
          description: The id of the user
          required: true
          schema:
            type: integer
      requestBody:
        description: Policy to create
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InsurancePolicy'
        required: true
      responses:
        201:
          description: Policy Created
          content: { }
      x-codegen-request-body-name: body
  /user/{user_id}/insurance_policy/{package_id}:
    get:
      tags:
        - Insurance Policy
      summary: Gets all policies for a user
      parameters:
        - name: user_id
          in: path
          description: The id of the user
          required: true
          schema:
            type: integer
        - name: package_id
          in: path
          description: The id of the insurance Policy
          required: true
          schema:
            type: integer
      operationId: get_all
      responses:
        200:
          description: Policy retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InsurancePolicy'
    delete:
      tags:
        - Insurance Policy
      summary: Delete application
      operationId: delete_package
      parameters:
        - name: user_id
          in: path
          description: The id of the user to remove
          required: true
          schema:
            type: integer
        - name: package_id
          in: path
          description: The id of the insurance Policy
          required: true
          schema:
            type: integer
      responses:
        202:
          description: Successfully deleted policy
          content: { }
        404:
          description: Policy doesn't exist
          content: { }

  /user/{user_id}/quote:
    get:
      tags:
        - Quotes
      summary: Get all quotes for a user
      operationId: get_for_user
      parameters:
        - name: user_id
          in: path
          description: The id of the user
          required: true
          schema:
            type: integer
      responses:
        200:
          description: Successfully retrived quotes for user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Quotes'
        404:
          description: User doesn't exist
          content: { }
    post:
      tags:
        - Quotes
      summary: Create a new quote
      operationId: new_quote
      parameters:
        - name: user_id
          in: path
          description: The id of the user for whome to quote
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Quote'
        required: true
      responses:
        200:
          description: Successfully retrived user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Quote'
        404:
          description: User doesn't exist
          content: { }
  /quote/{quote_id}:
    get:
      tags:
        - Quotes
      summary: Get quote by id
      operationId: get_quote
      parameters:
        - name: quote_id
          in: path
          description: The id of the quote
          required: true
          schema:
            type: integer
      responses:
        200:
          description: Successfully retrived quote
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Quote'
        404:
          description: Quote doesn't exist
          content: { }
    put:
      tags:
        - Quotes
      summary: Update a quote
      operationId: update_quote
      parameters:
        - name: quote_id
          in: path
          description: The id of the quote to update
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Quote'
        required: true
      responses:
        200:
          description: Successfully updated quoter
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Quote'
        404:
          description: Quote doesn't exist
          content: { }
    delete:
      tags:
        - Quotes
      summary: Delete quote
      operationId: delete_quote
      parameters:
        - name: quote_id
          in: path
          description: The id of the quote to remove
          required: true
          schema:
            type: integer
      responses:
        202:
          description: Successfully deleted quote
          content: { }
        404:
          description: Policy doesn't exist
          content: { }
  /quote/{quote_id}/calculate-price:
    post:
      tags:
      - Quotes
      summary: Calculate and store a price for a quote
      operationId: calculate_price
      parameters:
        - name: quote_id
          in: path
          description: The id of the quote to update
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              type: object
        required: false
      responses:
        200:
          description: Successfully calculated quote
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Quote'
        400:
          description: Quote is not complete
          content: { }
        404:
          description: Quote doesn't exist
          content: { }

components:
  securitySchemes:
    api_key:
      type: apiKey
      name: X-Auth
      in: header
      x-apikeyInfoFunc: check_api_key
  schemas:
    InsurancePolicies:
      type: array
      items:
        $ref: '#/components/schemas/InsurancePolicy'
    Benefits:
      type: array
      items:
        $ref: '#/components/schemas/Benefit'
    Quotes:
      type: array
      items:
        $ref: '#/components/schemas/Quote'
    User:
      required:
        - email
      type: object
      properties:
        id:
          type: integer
        email:
          type: string
          format: email
        password:
          type: string
      example:
        password: bob
        email: bob@bob.bob
    UserProfile:
      type: object
      properties:
        user_id:
          type: integer
        personal_details:
          $ref: '#/components/schemas/PersonalDetails'
        driver_history:
          $ref: '#/components/schemas/DriverHistory'
    PersonalDetails:
      properties:
        id:
          type: integer
        full_name:
          type: string
        address:
          $ref: '#/components/schemas/Address'
        dob:
          type: string
          format: date
        relationship_status:
          type: string
          nullable: true
          enum:
            - Single
            - Married
            - null
        home_owner:
          type: boolean
          nullable: true
        dependents:
          description: Number of dependents under the age of 16
          type: integer
        employment_status:
          type: string
          nullable: true
          enum:
            - FullTime
            - PartTime
            - Unemployed
            - Retired
            - Student
            - null
    Membership:
      required:
        - start_date
        - end_date
        - type
      properties:
        id:
          type: integer
        user_id:
          type: integer
        start_date:
          type: string
          format: date
        end_date:
          type: string
          format: date
        type:
          $ref: '#/components/schemas/MembershipType'
    InsurancePolicy:
      properties:
        id:
          type: integer
        user_id:
          type: integer
        type:
          $ref: '#/components/schemas/InsuranceType'
        start_date:
          type: string
          format: date
        end_date:
          type: string
          format: date
    Quote:
      required:
        - type
      properties:
        id:
          type: integer
        user_id:
          type: integer
        type:
          $ref: '#/components/schemas/InsuranceType'
        created:
          type: integer
        updated:
          type: integer
        is_complete:
          type: boolean
        price:
          nullable: true
          type: number
        sections:
          type: object
          oneOf:
            - $ref: '#/components/schemas/VehicleQuoteSections'
            - $ref: '#/components/schemas/HomeQuoteSections'
          discriminator:
            propertyName: quote_type
    QuoteSections:
      type: object
      properties:
        quote_id:
          type: integer
        quote_type:
          $ref: '#/components/schemas/InsuranceType'
      discriminator:
        propertyName: quote_type
    VehicleQuoteSections:
      allOf:
        - $ref: '#/components/schemas/QuoteSections'
        - type: object
          properties:
            driver_details:
              $ref: '#/components/schemas/DriverDetails'
            vehicle_details:
              $ref: '#/components/schemas/VehicleDetails'
            vehicle_usage:
              $ref: '#/components/schemas/VehicleUsage'
            additional_drivers:
              type: array
              items:
                $ref: '#/components/schemas/DriverDetails'
    HomeQuoteSections:
      allOf:
        - $ref: '#/components/schemas/QuoteSections'
        - type: object
          properties:
            personal_details:
              $ref: '#/components/schemas/PersonalDetails'
            home_details:
              $ref: '#/components/schemas/HomeDetails'

    VehicleDetails:
      properties:
        section_complete:
          type: boolean
        quote_id:
          type: integer
        alarm_fitter:
          type: boolean
          nullable: true
        immobilizer_fitted:
          type: boolean
          nullable: true
        tracking_device_fitted:
          type: boolean
          nullable: true
        is_import:
          type: boolean
          nullable: true
        off_side_drive:
          type: boolean
          nullable: true
        number_of_seats:
          type: number
          nullable: true
        current_value:
          type: number
          nullable: true
        is_modified:
          type: boolean
          nullable: true
    VehicleUsage:
      properties:
        quote_id:
          type: integer
        usage_type:
          type: string
          nullable: true
          enum:
            - SDP
            - SDPC
            - SDPCB
        annual_milage:
          type: integer
          nullable: true
        day_storage:
          type: string
          nullable: true
          enum:
            - Home
            - CarParkOffice
            - CarParkPublic
            - StreetAwayFromHome
        night_storage:
          type: string
          nullable: true
          enum:
            - Drive
            - StreetOutsideHome
            - StreetAwayFromHome
            - Garage
        night_storage_at_home:
          type: boolean
          nullable: true
        night_storage_address:
          $ref: '#/components/schemas/Address'
    DriverDetails:
      properties:
        id:
          type: integer
        personal_details:
          $ref: '#/components/schemas/PersonalDetails'
        driver_history:
          $ref: '#/components/schemas/DriverHistory'
    DriverHistory:
      properties:
        id:
          type: integer
        licence_type:
          type: string
          enum:
            - Full
            - Provisional
            - null
        license_since:
          type: string
          format: date
        licence_no:
          type: string
        previous_claims:
          type: array
          items:
            $ref: '#/components/schemas/PreviousClaim'
    PreviousClaim:
      properties:
        id:
          type: integer
        driver_history_id:
          type: integer
        date:
          type: string
          format: date
        fault:
          type: string
          enum:
            - Self
            - ThirdParty
        claim_type:
          type: string
          enum:
            - Accident
            - Theft
    HomeDetails:
      properties:
        address:
          $ref: '#/components/schemas/Address'
    Address:
      properties:
        id:
          type: integer
        number_or_name:
          type: string
        street:
          type: string
        town:
          type: string
        county:
          type: string
        postcode:
          type: string
    Benefit:
      required:
        - name
        - min_membership
      properties:
        name:
          type: string
        min_membership:
          $ref: '#/components/schemas/MembershipType'
        max_membership:
          $ref: '#/components/schemas/MembershipType'
    MembershipType:
      type: string
      enum:
        - Smart
        - Silver
        - Gold
    InsuranceType:
      type: string
      enum:
        - Home
        - Motor

